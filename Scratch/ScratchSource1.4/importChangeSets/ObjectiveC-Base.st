Object subclass: #ObjectiveCBridge	instanceVariableNames: ''	classVariableNames: 'ClassObjects DoNotWait SelectorObjects'	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCBridge commentStamp: '<historical>' prior: 0!*  Created by John M McIntosh on 9/17/08. Some of this code was funded via a grant from the European Smalltalk User Group (ESUG) Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectiveCBridge class	instanceVariableNames: 'mutexForAutoReleasePool counterOfAutoReleasePoolDepth'!!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'John M McIntosh 4/24/2009 16:50'!asNSStringUTF8: aString	| externalAddress |	externalAddress := self primitiveGetNSStringForString: aString encoding: 4.	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 10/24/2008 14:59'!fetchByteArrayConstantCalled: aString withLength: length	| address |	address := self findAddressForString: aString.	address = 0 ifTrue: [^self error: 'Address of constant not found'].	^self fetchByteArrayFrom: address length: length.	! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 10/24/2008 14:52'!fetchByteArrayFrom: anAddress length: length	^self nsInvocationGetStructureType: anAddress length: length! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'John M McIntosh 3/27/2009 00:04'!fetchObjectCObjectConstantCalled: aString	| data dataWord |	data := ObjectiveCBridge fetchByteArrayConstantCalled: aString withLength: 4.	dataWord := data unsignedLongAt: 1 bigEndian: SmalltalkImage current isBigEndian.	^ObjectiveCObject newWithExternalAddress: dataWord.! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 10/23/2008 11:26'!findAddressForString: aNameString	"ObjectiveCBridge findAddressForString: 'CGRectZero'"	| externalAddress |	externalAddress := self primitiveGetAddressFromEntryPointString: aNameString.	^externalAddress! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 9/28/2008 15:38'!findClassCalled: aNameSymbol	"Looking for a non-existant class should return the NSNil object (I think)"	| externalAddress |	externalAddress := self primitiveGetObjCClassForString: aNameSymbol.	(externalAddress = 0 and: [aNameSymbol ~= #NSNull]) ifTrue: [^ObjectiveCNSNull singleton].	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 9/29/2008 02:01'!findMethodSignatureForSelector: aSelector on: aClass	 | externalAddress |		externalAddress := self primitiveGetMethodSignatureForSelector: aSelector 		externalAddress on: aClass externalAddress.	^ObjectiveCNSMethodSignature newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'private-Objective C Class' stamp: 'JMM 9/29/2008 02:05'!findSelectorCalled: aNameSymbol	| externalAddress |	externalAddress := self primitiveGetSelectorForString: aNameSymbol.	^ObjectiveCSEL newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'objective C NSString' stamp: 'JMM 9/25/2008 13:19'!asString: object	"The thought here is if the external address of this Objective C object is less than 4MB then likely it's bogus and	will cause a crash if we try to use it"	(object externalAddressPrivate < 1024) ifTrue: [^'unknown bogus?'].	^self primitiveConvertNSSTringToUTF8: object externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'John M McIntosh 2/2/2009 13:00'!callNSLog: oop1 	^self primitiveNSLog: oop1 externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'John M McIntosh 2/11/2009 09:22'!callNSLogWithSmalltalkString: string 	| nsString results |	nsString := string asNSStringUTF8.	results := self callNSLog: nsString.	nsString release.	^results! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'John M McIntosh 3/5/2009 20:05'!callbackLeave: aNumber 	^self primitiveCallbackLeave: aNumber! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 10/23/2008 20:10'!dropQualifiers: argumentType	| removal |		removal := 'rnNoORV'  includes: argumentType first.	removal ifTrue: 		[^self dropQualifiers: (argumentType allButFirst)].	^argumentType! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 10/3/2008 09:24'!isEqual: oop1 to: oop2	^self primitiveIsEqual: oop1 externalAddress to: oop2 externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 9/23/2008 17:37'!methodArgumentTypeFor: aObject atIndex: aIndexNumber	"index numbers start at zero, zero and one are method and self, so using smalltalk 	index starting at one, means we start at objective c argument index 2"	^self primitiveMethodSignatureGetArgumentType: aObject externalAddress atIndex: aIndexNumber+1! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 9/23/2008 13:53'!methodNumberOfArguments: aObject	^(self primitiveMethodSignatureGetNumberOfArguments: aObject externalAddress) - 2! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 9/29/2008 02:55'!methodReturnLength: aObject	^self primitiveMethodSignatureGetMethodReturnLength: aObject externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C NSMethodSignature' stamp: 'JMM 9/23/2008 13:35'!methodReturnType: aObject	^self primitiveMethodSignatureGetReturnType: aObject externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/22/2008 13:27'!classObjectForName: aNameSymbolOrString	| requiredClassSymbolName |	requiredClassSymbolName := aNameSymbolOrString asSymbol.	^self classObjects at: requiredClassSymbolName ifAbsentPut: [self findClassCalled: requiredClassSymbolName]! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/23/2008 14:54'!classObjectForOop: aOop	| externalAddress |	externalAddress := self primitiveGetClass: aOop externalAddress.	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/29/2008 02:44'!descriptionAsStringFor: aOop	^self primitiveGetDescription: aOop externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'John M McIntosh 3/6/2009 12:37'!getAutoReleasePool 	| externalAddress |	externalAddress := self primitiveGetAutoReleasePool.	externalAddress = 0 ifTrue: [^ObjectiveCNSNull singleton].	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/25/2008 00:26'!hashForOop: aOop	| message |	message := Message selector: #hash arguments: Array new.		^self forward: message to: aOop! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/22/2008 21:56'!methodSignatureObjectforSelector: aNameSymbolOrStringSelector onClass: aNameSymbolOrStringClass	| classObject |	classObject := self classObjectForName: aNameSymbolOrStringClass.	^self methodSignatureObjectforSelector: aNameSymbolOrStringSelector onClassOop: classObject! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/28/2008 16:31'!methodSignatureObjectforSelector: aNameSymbolOrStringSelector onClassOop: classObject	| selectorObject  |	selectorObject := self selectorObjectForName: aNameSymbolOrStringSelector.	^self findMethodSignatureForSelector: selectorObject on: classObject! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/29/2008 03:09'!performSelectorNamed: aSelectorNameOrSymbol on: aObject noReturn: noReturnFlag  useClass: theClass	^self performSelector: (self selectorObjectForName: aSelectorNameOrSymbol)		on: aObject noReturn: noReturnFlag  useClass: theClass! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/29/2008 03:09'!performSelectorNamed: aSelectorNameOrSymbol onClassNamed: aClassNameOrSymbol noReturn: noReturnFlag useClass: theClass	^self performSelector: (self selectorObjectForName: aSelectorNameOrSymbol)		on: (self classObjectForName: aClassNameOrSymbol) noReturn: noReturnFlag  useClass: theClass! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/23/2008 13:57'!selectorObjectForName: aNameSymbolOrString	| requiredSelectorSymbolName |	requiredSelectorSymbolName := aNameSymbolOrString asSymbol.	^self selectorObjects at: requiredSelectorSymbolName ifAbsentPut: [self findSelectorCalled: requiredSelectorSymbolName]! !!ObjectiveCBridge class methodsFor: 'objective C Class' stamp: 'JMM 9/28/2008 15:40'!superClassObjectForOop: aOop	| externalAddress |	externalAddress := self primitiveGetSuperClass: aOop externalAddress.	externalAddress = 0 ifTrue: [^ObjectiveCNSNull singleton].	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 4/24/2009 09:25'!classObjects	^ClassObjects ifNil: [ClassObjects := IdentityDictionary new:117]! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 3/5/2009 20:51'!counterOfAutoReleasePoolDepth	^counterOfAutoReleasePoolDepth ifNil: [counterOfAutoReleasePoolDepth := 0]! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 3/7/2009 15:46'!mutexForAutoReleasePool	^mutexForAutoReleasePool ifNil: [mutexForAutoReleasePool := Monitor new]! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 4/24/2009 09:25'!selectorObjects	^SelectorObjects ifNil: [SelectorObjects := IdentityDictionary new:257]! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 3/17/2009 23:51'!setPeformSelectorOnMainThread: aValue	"self setPeformSelectorOnMainThread: false"	Processor activeProcess environmentAt: #ObjectiveCPerformSelectorOnMainThread put: aValue! !!ObjectiveCBridge class methodsFor: 'class variables' stamp: 'John M McIntosh 3/17/2009 23:50'!shouldWePeformSelectorOnMainThread	"self shouldWePeformSelectorOnMainThread"	^Processor activeProcess environmentAt: #ObjectiveCPerformSelectorOnMainThread ifAbsent: [false]! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'John M McIntosh 3/18/2009 00:13'!forward: aMessage to: anObjectiveCObject	| messageSignatureObject methodReturnType numberOfArguments selectorObject |		false ifTrue: [Transcript show: 'dispatch ';show: aMessage selector;space;show: self shouldWePeformSelectorOnMainThread;cr;flush].	selectorObject := self selectorObjectForName: aMessage selector.	messageSignatureObject := self findMethodSignatureForSelector: selectorObject on: anObjectiveCObject.	messageSignatureObject isNilPrivate		ifTrue: [MessageNotUnderstood new 				message: aMessage;				receiver: self;				signal.			^ aMessage sentTo: self].	numberOfArguments := messageSignatureObject methodNumberOfArguments.	methodReturnType := self dropQualifiers: (messageSignatureObject methodReturnType).	(numberOfArguments = 0) and: [self shouldWePeformSelectorOnMainThread == false] and: 		[self zeroArgumentsReturnType: methodReturnType 			on: anObjectiveCObject 			selector: selectorObject 			onSuccess: [:v | ^v]].	(numberOfArguments = 1)  and: [self shouldWePeformSelectorOnMainThread == false] and: 		[self oneArgumentsReturnType: methodReturnType 			on: anObjectiveCObject 			selector: selectorObject 			messageSignatureObject:  messageSignatureObject 			arguments: aMessage arguments			onSuccess: [:v | ^v]].	(numberOfArguments = 2)  and: [self shouldWePeformSelectorOnMainThread == false] and: 		[self twoArgumentsReturnType: methodReturnType 			on: anObjectiveCObject 			selector: selectorObject 			messageSignatureObject:  messageSignatureObject 			arguments: aMessage arguments			onSuccess: [:v | ^v]].	^self nsInvoke: messageSignatureObject selector: selectorObject on: anObjectiveCObject with:  aMessage arguments returning: methodReturnType! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'John M McIntosh 4/24/2009 16:31'!nsInvoke: messageSignatureObject selector: selector on: anObjectiveCObject with:  arguments returning: methodReturnType	| nsInvokeInstance argumentType argumentValue indexNumber sizeOfReturnValue memoryAddress allocatedMemory allocatedReturnValue returnedValue rememberPerformSelectorOnMainThreadState |	false ifTrue: [Transcript show: 'nsInvoke fires';cr].	rememberPerformSelectorOnMainThreadState := self shouldWePeformSelectorOnMainThread.	self setPeformSelectorOnMainThread:  false.	(self counterOfAutoReleasePoolDepth = 0) ifTrue: [Transcript show: 		selector descriptionAsString;space].	nsInvokeInstance := self nsInvocationGetWithMethodSignature: messageSignatureObject.	self nsInvocationSetSelector: selector target: anObjectiveCObject on: nsInvokeInstance.	sizeOfReturnValue := messageSignatureObject methodReturnLength.	" Is there a check for return value?"	allocatedMemory := OrderedCollection new: arguments size + 1.	allocatedReturnValue := 0.	sizeOfReturnValue == 0 ifFalse: 		[allocatedReturnValue := self nsInvocationCalloc: sizeOfReturnValue.		false ifTrue: [Transcript show: 'allocated return value ';show: allocatedReturnValue;cr].		allocatedMemory add: allocatedReturnValue ].	1 to: arguments size do: [:i |		argumentType :=  self dropQualifiers: (self methodArgumentTypeFor: messageSignatureObject atIndex: i).		argumentValue := arguments at: i.		indexNumber := i + 1.		memoryAddress := self setDataTypeForInstance: nsInvokeInstance argumentType: argumentType index: indexNumber value: argumentValue.		allocatedMemory add: memoryAddress.			false ifTrue: [Transcript show: 'allocated setArgumentType ';show: memoryAddress;cr].	].	rememberPerformSelectorOnMainThreadState 		ifTrue: [| invokeSelector | 				invokeSelector := self selectorObjectForName: #invoke.				self performSelectorOnMainThread: invokeSelector on: nsInvokeInstance with: 0 returnValue: allocatedReturnValue waitTilDone: DoNotWait == false]		ifFalse: [nsInvokeInstance invoke.			allocatedReturnValue == 0 ifFalse: 				[self nsInvocationGetReturnValue: allocatedReturnValue on: nsInvokeInstance]].	allocatedReturnValue == 0 ifFalse: 		[returnedValue := self nsInvokeHandleReturnType: methodReturnType  			locatedAt: allocatedReturnValue length: sizeOfReturnValue].	allocatedMemory do: [:e | 		false ifTrue: [Transcript show: 'free ';show: e;cr;flush].		self nsInvocationFree: e].	self setPeformSelectorOnMainThread: rememberPerformSelectorOnMainThreadState.	^methodReturnType = 'v' 		ifTrue: [anObjectiveCObject]		ifFalse: [returnedValue]! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 10/24/2008 14:29'!nsInvokeHandleReturnType: methodReturnType  locatedAt: allocatedReturnValue length: length	| externalAddress |	methodReturnType = 'c' ifTrue: [^(self nsInvocationGetCType: allocatedReturnValue signed: true)].	methodReturnType = 'C' ifTrue: [^(self nsInvocationGetCType: allocatedReturnValue signed: false)].	methodReturnType = 'i' ifTrue: [^self nsInvocationGetIntType: allocatedReturnValue signed: true].	methodReturnType = 'I' ifTrue: [^self nsInvocationGetIntType: allocatedReturnValue signed: false].	methodReturnType = 's' ifTrue: [^self nsInvocationGetShortType: allocatedReturnValue signed: true].	methodReturnType = 'S' ifTrue: [^self nsInvocationGetShortType: allocatedReturnValue signed: false].	methodReturnType = 'l' ifTrue: [^self nsInvocationGetLongType: allocatedReturnValue signed: true].	methodReturnType = 'L' ifTrue: [^self nsInvocationGetLongType: allocatedReturnValue signed: false].	methodReturnType = 'q' ifTrue: [^self nsInvocationGetLongLongType: allocatedReturnValue signed: true].	methodReturnType = 'Q' ifTrue: [^self nsInvocationGetLongLongType: allocatedReturnValue signed: false].	methodReturnType = 'f' ifTrue: [^self nsInvocationGetFloatType: allocatedReturnValue].	methodReturnType = 'd' ifTrue: [^self nsInvocationGetDoubleType: allocatedReturnValue].	methodReturnType = 'v' ifTrue: [^self].	methodReturnType = '*' ifTrue: [^self nsInvocationGetCharPointerType: allocatedReturnValue].	methodReturnType = '@' ifTrue: [externalAddress := self nsInvocationGetObjectType: allocatedReturnValue.									^ObjectiveCObject newWithExternalAddress: externalAddress].	methodReturnType = '#' ifTrue: [externalAddress := self nsInvocationGetClassType: allocatedReturnValue.									^ObjectiveCObject newWithExternalAddress: externalAddress].	methodReturnType = ':' ifTrue: [externalAddress := self nsInvocationGetSelectorType: allocatedReturnValue.									^ObjectiveCSEL newWithExternalAddress: externalAddress].	methodReturnType first =  ${ ifTrue: [^self nsInvocationGetStructureType: allocatedReturnValue length: length].! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 10/27/2008 11:18'!oneArgumentsReturnType: methodReturnType on: anObjectiveCObject selector: selectorObject messageSignatureObject:  messageSignatureObject  arguments: arguments onSuccess: aSuccessBlock	| returnObject argument1Type argument |	argument1Type :=  self methodArgumentTypeFor: messageSignatureObject atIndex: 1.	(argument1Type size > 1 and: [argument1Type first = $^])		ifFalse: 			[(#('@' '#' ':' ) includes: argument1Type ) ifFalse: [^false]].	argument := arguments at: 1.	(#('@' '#') includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject 						on: anObjectiveCObject  with: argument noReturn: false useClass: ObjectiveCObject.					aSuccessBlock value: returnObject].	(#(':') includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject 						on: anObjectiveCObject  with: argument noReturn: false useClass: ObjectiveCSEL.					aSuccessBlock value: returnObject].	(#('v') includes: methodReturnType )			ifTrue: [self performSelector: selectorObject on: anObjectiveCObject with: argument  noReturn: true useClass: ObjectiveCObject.					aSuccessBlock value: anObjectiveCObject].	^false! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 9/29/2008 02:45'!performSelector: aSelectorOop on: aClassOrInstanceOop noReturn: noReturnFlag	| externalAddress |	externalAddress := self primitivePerformSelector: aSelectorOop externalAddress on: aClassOrInstanceOop externalAddress.	noReturnFlag ifTrue: [^aClassOrInstanceOop].	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 9/29/2008 03:06'!performSelector: aSelectorOop on: aClassOrInstanceOop noReturn: noReturnFlag useClass: theClass	| externalAddress |	externalAddress := self primitivePerformSelector: aSelectorOop externalAddress on: aClassOrInstanceOop externalAddress.	noReturnFlag ifTrue: [^aClassOrInstanceOop].	^theClass newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 9/29/2008 22:50'!performSelector: aSelectorOop on: aClassOrInstanceOop with: argument1Oop noReturn: noReturnFlag useClass: theClass	| externalAddress argument |	argument := argument1Oop isObjectiveCObject 		ifTrue: [argument1Oop externalAddress]		ifFalse: [argument1Oop].	externalAddress := self primitivePerformSelector: aSelectorOop externalAddress on: aClassOrInstanceOop externalAddress with: argument.	noReturnFlag ifTrue: [^aClassOrInstanceOop].	^theClass newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 9/30/2008 06:10'!performSelector: aSelectorOop on: aClassOrInstanceOop with: argument1Oop with: argument2Oop noReturn: noReturnFlag useClass: theClass	| externalAddress argument1 argument2 |	argument1 := argument1Oop isObjectiveCObject 		ifTrue: [argument1Oop externalAddress]		ifFalse: [argument1Oop].	argument2 := argument2Oop isObjectiveCObject 		ifTrue: [argument2Oop externalAddress]		ifFalse: [argument2Oop].	externalAddress := self primitivePerformSelector: aSelectorOop externalAddress on: aClassOrInstanceOop externalAddress with: argument1 with: argument2.	noReturnFlag ifTrue: [^aClassOrInstanceOop].	^theClass newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'John M McIntosh 3/18/2009 00:40'!performSelectorOnMainThread: aBlock	| oldValue | 		oldValue := self shouldWePeformSelectorOnMainThread.	self setPeformSelectorOnMainThread: true.	^aBlock ensure: [self setPeformSelectorOnMainThread:  oldValue].! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 11/5/2008 10:04'!performSelectorOnMainThread: aSelectorOop on: aClassOrInstanceOop with: argument1Oop returnValue: aReturnValue waitTilDone: doneFlag	| argument |	argument := argument1Oop isObjectiveCObject 		ifTrue: [argument1Oop externalAddress]		ifFalse: [argument1Oop].	self primitivePerformSelectorOnMainThreadWithWaitTilDone: aSelectorOop externalAddress on: aClassOrInstanceOop externalAddress with: argument  returnValue: aReturnValue waitTilDone: doneFlag.	! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'John M McIntosh 3/18/2009 00:40'!performSelectorOnMainThreadDoNotWait: aBlock	| oldValue |		oldValue := self shouldWePeformSelectorOnMainThread.	self setPeformSelectorOnMainThread:  true.	DoNotWait := true.	^aBlock ensure: [self setPeformSelectorOnMainThread: oldValue. DoNotWait := false.].! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 10/27/2008 11:18'!twoArgumentsReturnType: methodReturnType on: anObjectiveCObject selector: selectorObject messageSignatureObject:  messageSignatureObject  arguments: arguments onSuccess: aSuccessBlock	| returnObject argument1Type argument2Type argument1 argument2 |	argument1Type :=  self methodArgumentTypeFor: messageSignatureObject atIndex: 1.	(argument1Type size > 1 and: [argument1Type first = $^])		ifFalse: 			[(#('@' '#' ':' ) includes: argument1Type ) ifFalse: [^false]].	argument2Type :=  self methodArgumentTypeFor: messageSignatureObject atIndex: 2.	(argument2Type size > 1 and: [argument2Type first = $^])		ifFalse: 			[(#('@' '#' ':' ) includes: argument2Type ) ifFalse: [^false]].	argument1 := arguments at: 1.	argument2 := arguments at: 2.	(#('@' '#') includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject 						on: anObjectiveCObject  with: argument1 with: argument2 noReturn: false useClass: ObjectiveCObject.					aSuccessBlock value: returnObject].	(#(':') includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject 						on: anObjectiveCObject  with: argument1 with: argument2 noReturn: false useClass: ObjectiveCSEL.					aSuccessBlock value: returnObject].	(#('v') includes: methodReturnType )			ifTrue: [self performSelector: selectorObject on: anObjectiveCObject with: argument1 with: argument2 noReturn: true useClass: ObjectiveCObject.					aSuccessBlock value: anObjectiveCObject].	^false! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'John M McIntosh 3/28/2009 23:27'!wrapWithAutoReleasePool: aBlock	 | pool | 				self mutexForAutoReleasePool critical: 		[self shouldWePeformSelectorOnMainThread ifTrue: [Transcript show: 'M';space.].		pool := self getAutoReleasePool.		counterOfAutoReleasePoolDepth := self counterOfAutoReleasePoolDepth + 1.		[aBlock value] ensure: [pool release. counterOfAutoReleasePoolDepth := self counterOfAutoReleasePoolDepth - 1]].! !!ObjectiveCBridge class methodsFor: 'forwarding' stamp: 'JMM 10/27/2008 11:17'!zeroArgumentsReturnType: methodReturnType on: anObjectiveCObject selector: selectorObject onSuccess: aSuccessBlock	| returnObject |	(#('@' '#') includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject on: anObjectiveCObject  noReturn: false  useClass: ObjectiveCObject.					aSuccessBlock value: returnObject] .	(#(':' ) includes: methodReturnType )			ifTrue: [returnObject := self performSelector: selectorObject on: anObjectiveCObject  noReturn: false  useClass: ObjectiveCSEL.					aSuccessBlock value: returnObject] .	(#('v') includes: methodReturnType )			ifTrue: [self performSelector: selectorObject on: anObjectiveCObject  noReturn: true  useClass: ObjectiveCObject.					aSuccessBlock value: anObjectiveCObject ].	^false! !!ObjectiveCBridge class methodsFor: 'class initialization' stamp: 'John M McIntosh 3/17/2009 23:45'!initialize	"ObjectiveCBridge initialize"	Smalltalk addToShutDownList: self after: DisplayScreen.	DoNotWait := false.! !!ObjectiveCBridge class methodsFor: 'class initialization' stamp: 'John M McIntosh 2/9/2009 13:24'!shutDown: quitting 	ClassObjects := nil.	SelectorObjects := nil.	quitting ifTrue: 		[ObjectiveCObject allSubInstancesDo: [:e | e externalAddress: 0]].! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 11/3/2008 11:48'!nsInvocationCalloc: value	^self primitiveNSInvocationCalloc: value! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:04'!nsInvocationFree: value	self primitiveNSInvocationFree: value! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 2/4/2009 21:46'!nsInvocationGetArgument: aMethodSignatureOop buffer: buffer atIndex: index	self primitiveNSInvocationGetArgument: aMethodSignatureOop buffer: buffer atIndex: index + 1! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 20:14'!nsInvocationGetCType: bufferAddressOop signed: signedBoolean	| character |	"Objective C stores BOOL as char "	character := self primitiveNSInvocationGetCType: bufferAddressOop signed: signedBoolean.	character asInteger = 0 ifTrue: [^false].	character asInteger = 1 ifTrue: [^true].	^character! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 16:59'!nsInvocationGetCharPointerType: bufferAddressOop	^self primitiveNSInvocationGetCharPointerType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 16:59'!nsInvocationGetClassType: bufferAddressOop	^self primitiveNSInvocationGetClassType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:00'!nsInvocationGetDoubleType: bufferAddressOop	^self primitiveNSInvocationGetDoubleType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:00'!nsInvocationGetFloatType: bufferAddressOop	^self primitiveNSInvocationGetFloatType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:00'!nsInvocationGetIntType: bufferAddressOop signed: signedBoolean	^self primitiveNSInvocationGetIntType: bufferAddressOop signed: signedBoolean! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:00'!nsInvocationGetLongLongType: bufferAddressOop signed: signedBoolean	^self primitiveNSInvocationGetLongLongType: bufferAddressOop signed: signedBoolean! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:00'!nsInvocationGetLongType: bufferAddressOop signed: signedBoolean	^self primitiveNSInvocationGetLongType: bufferAddressOop signed: signedBoolean! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:01'!nsInvocationGetObjectType: bufferAddressOop	^self primitiveNSInvocationGetObjectType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 4/24/2009 16:28'!nsInvocationGetReturnValue: returnValueAddress on: aNSinvokeOops	| nsinvoke |	nsinvoke := aNSinvokeOops isObjectiveCObject 		ifTrue: [aNSinvokeOops externalAddress]		ifFalse: [aNSinvokeOops].	self primitiveNSInvocationGetReturnValue: returnValueAddress on: nsinvoke! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:01'!nsInvocationGetSelectorType: bufferAddressOop	^self primitiveNSInvocationGetSelectorType: bufferAddressOop! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 17:04'!nsInvocationGetShortType: bufferAddressOop signed: signedBoolean	^self primitiveNSInvocationGetShortType: bufferAddressOop signed: signedBoolean! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 10/24/2008 14:03'!nsInvocationGetStructureType: bufferAddressOop length: length	^self primitiveNSInvocationGetStructureType: bufferAddressOop length: length! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 4/24/2009 10:41'!nsInvocationGetWithMethodSignature: aMethodSignatureOop	| externalAddress ext1 |	ext1 := aMethodSignatureOop isObjectiveCObject 		ifTrue: [aMethodSignatureOop externalAddress]		ifFalse: [aMethodSignatureOop].	externalAddress := self primitiveNSInvocationWithMethodSignature:  ext1.	^ObjectiveCObject newWithExternalAddress: externalAddress.! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 02:22'!nsInvocationMalloc: value	^self primitiveNSInvocationMalloc: value! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:07'!nsInvocationSetCType: aMethodSignatureOop signed: signedBoolean index: index value: aValue	^self primitiveNSInvocationSetCType: aMethodSignatureOop externalAddress signed: signedBoolean index: index value: aValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:11'!nsInvocationSetDoubleType: aMethodSignatureOop  index: index value: aValue		^self primitiveNSInvocationSetDoubleType: aMethodSignatureOop externalAddress index: index value: aValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:12'!nsInvocationSetFloatType: aMethodSignatureOop  index: index value: aValue		^self primitiveNSInvocationSetFloatType: aMethodSignatureOop externalAddress index: index value: aValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:14'!nsInvocationSetIntType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	^self primitiveNSInvocationSetIntType: aMethodSignatureOop externalAddress signed: signedBoolean index: index value: intValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:15'!nsInvocationSetLongLongType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	^self primitiveNSInvocationSetLongLongType: aMethodSignatureOop externalAddress signed: signedBoolean index: index value: intValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 01:17'!nsInvocationSetLongType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	^self primitiveNSInvocationSetLongType: aMethodSignatureOop externalAddress signed: signedBoolean index: index value: intValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/25/2008 20:41'!nsInvocationSetPointerType: aMethodSignatureOop  index: index value: pointerOops	| externalAddress |	externalAddress := pointerOops isObjectiveCObject 		ifTrue: [pointerOops externalAddress]		ifFalse: [pointerOops].	^self primitiveNSInvocationSetPointerType: aMethodSignatureOop externalAddress index: index value: externalAddress! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 4/24/2009 10:28'!nsInvocationSetSelector: aSelectorOOps target: object1Oops on: aNSinvokeOops	| ext1 ext2 ext3 |	ext1 := aSelectorOOps isObjectiveCObject 		ifTrue: [aSelectorOOps externalAddress]		ifFalse: [aSelectorOOps].	ext2 := object1Oops isObjectiveCObject 		ifTrue: [object1Oops externalAddress]		ifFalse: [object1Oops].	ext3 := aNSinvokeOops isObjectiveCObject 		ifTrue: [aNSinvokeOops externalAddress]		ifFalse: [aNSinvokeOops].	self primitiveNSInvocationSetSelector: ext1  target: ext2 on: ext3! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/24/2008 02:17'!nsInvocationSetShortType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	^self primitiveNSInvocationSetShortType: aMethodSignatureOop externalAddress signed: signedBoolean index: index value: intValue! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 9/26/2008 21:56'!nsInvocationSetStringType: aMethodSignatureOop  index: index value: pointerOops	^self primitiveNSInvocationSetStringType: aMethodSignatureOop externalAddress index: index value: pointerOops! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'JMM 10/25/2008 07:28'!nsInvocationSetStructureType: aMethodSignatureOop  index: index value: pointerOops	^self primitiveNSInvocationSetStructureType: aMethodSignatureOop externalAddress index: index value: pointerOops asByteArray! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 2/25/2009 22:03'!nsInvocationSetVoidPointerType: aMethodSignatureOop  index: index value: pointerOopsPossible	| pointerOops |	pointerOopsPossible isNumber		ifTrue: [pointerOops := ByteArray new: 4.				pointerOops longAt: 1 put: pointerOopsPossible asInteger  bigEndian: SmalltalkImage current  isBigEndian]		ifFalse: [pointerOops := pointerOopsPossible].	^self primitiveNSInvocationSetVoidPointerType: aMethodSignatureOop externalAddress index: index value: pointerOops asByteArray! !!ObjectiveCBridge class methodsFor: 'objective C NSInvocation' stamp: 'John M McIntosh 3/15/2009 14:48'!setDataTypeForInstance: nsInvokeInstance argumentType: argumentType index: indexNumber value: argumentValue		argumentType = 'c' ifTrue: [^self nsInvocationSetCType: nsInvokeInstance signed: true index: indexNumber value: argumentValue].		argumentType = 'C' ifTrue: [^self nsInvocationSetCType: nsInvokeInstance signed: false index: indexNumber value: argumentValue].		argumentType = 'i' ifTrue: [^self nsInvocationSetIntType: nsInvokeInstance signed: true index: indexNumber value: argumentValue].		argumentType = 'I' ifTrue: [^self nsInvocationSetIntType: nsInvokeInstance signed: false index: indexNumber value: argumentValue].		argumentType = 's' ifTrue: [^self nsInvocationSetShortType: nsInvokeInstance signed: true index: indexNumber value: argumentValue].		argumentType = 'S' ifTrue: [^self nsInvocationSetShortType: nsInvokeInstance signed: false index: indexNumber value: argumentValue].		argumentType = 'l' ifTrue: [^self nsInvocationSetLongType: nsInvokeInstance signed: true index: indexNumber value: argumentValue].		argumentType = 'L' ifTrue: [^self nsInvocationSetLongType: nsInvokeInstance signed: false index: indexNumber value: argumentValue].		argumentType = 'q' ifTrue: [^self nsInvocationSetLongLongType: nsInvokeInstance signed: true index: indexNumber value: argumentValue].		argumentType = 'Q' ifTrue: [^self nsInvocationSetLongLongType: nsInvokeInstance signed: false index: indexNumber value: argumentValue].		argumentType = 'd' ifTrue: [^self nsInvocationSetDoubleType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = 'f' ifTrue: [^self nsInvocationSetFloatType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = '*' ifTrue: [^self nsInvocationSetStringType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = '@' ifTrue: [^self nsInvocationSetPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = '#' ifTrue: [^self nsInvocationSetPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = ':' ifTrue: [^self nsInvocationSetPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType = '?' ifTrue: [^self nsInvocationSetPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].				argumentType  = '^v' ifTrue: [^self nsInvocationSetVoidPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType  = '^@' ifTrue: [^self nsInvocationSetVoidPointerType: nsInvokeInstance  index: indexNumber value: argumentValue].		argumentType first = ${ ifTrue: [^self nsInvocationSetStructureType: nsInvokeInstance  index: indexNumber value: argumentValue].		self halt. ! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 3/5/2009 20:04'!primitiveCallbackLeave: aNumber	<primitive: 'primitiveCallbackLeave' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 13:37'!primitiveConvertNSSTringToUTF8: anOop	<primitive: 'primitiveNSStringToUTF8' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 10/23/2008 11:20'!primitiveGetAddressFromEntryPointString: aString	<primitive: 'primitiveGetAddressFromEntryPointString' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 3/6/2009 12:38'!primitiveGetAutoReleasePool	<primitive: 'primitiveGetAutoReleasePool' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 14:33'!primitiveGetClass: anOop	<primitive: 'primitiveGetClass' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/29/2008 01:04'!primitiveGetDescription: anOop	<primitive: 'primitiveGetDescription' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/22/2008 14:43'!primitiveGetMethodSignatureForSelector: aSelectorObject on: aClassObject	<primitive: 'primitiveGetMethodSignatureForSelector' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 4/24/2009 16:49'!primitiveGetNSStringForString: aString encoding: anEncoding	<primitive: 'primitiveGetNSStringForString' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/22/2008 14:43'!primitiveGetObjCClassForString: aSymbol	<primitive: 'primitiveGetObjCClassForString' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/22/2008 14:43'!primitiveGetSelectorForString: aSymbol	<primitive: 'primitiveGetSelectorForString' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 23:22'!primitiveGetSuperClass: anOop	<primitive: 'primitiveGetSuperClass' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 10/3/2008 09:23'!primitiveIsEqual: oop1 to: oop2	<primitive: 'primitiveIsEqual' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 17:24'!primitiveMethodSignatureGetArgumentType: anOop atIndex: aIndexNumber	<primitive: 'primitiveMethodSignatureGetArgumentType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/29/2008 02:37'!primitiveMethodSignatureGetMethodReturnLength: anOop	<primitive: 'primitiveMethodSignatureGetMethodReturnLength' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 13:33'!primitiveMethodSignatureGetNumberOfArguments: anOop	<primitive: 'primitiveMethodSignatureGetNumberOfArguments' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 13:33'!primitiveMethodSignatureGetReturnType: anOop	<primitive: 'primitiveMethodSignatureGetReturnType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 11/3/2008 11:49'!primitiveNSInvocationCalloc: storageObject	<primitive: 'primitiveNSInvocationCalloc' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 00:59'!primitiveNSInvocationFree: storageObject	<primitive: 'primitiveNSInvocationFree' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 2/4/2009 14:17'!primitiveNSInvocationGetArgument: aMethodSignatureOop buffer: buffer atIndex: index	<primitive: 'primitiveNSInvocationGetArgument' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 17:13'!primitiveNSInvocationGetCType: aBufferOop signed: signedBoolean	<primitive: 'primitiveNSInvocationGetCType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:55'!primitiveNSInvocationGetCharPointerType: aBufferOop	<primitive: 'primitiveNSInvocationGetCharPointerType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:57'!primitiveNSInvocationGetClassType: aBufferOop	<primitive: 'primitiveNSInvocationGetClassType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:56'!primitiveNSInvocationGetDoubleType: aBufferOop	<primitive: 'primitiveNSInvocationGetDoubleType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:56'!primitiveNSInvocationGetFloatType: aBufferOop	<primitive: 'primitiveNSInvocationGetFloatType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 17:13'!primitiveNSInvocationGetIntType: aBufferOop signed: signedBoolean	<primitive: 'primitiveNSInvocationGetIntType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 17:14'!primitiveNSInvocationGetLongLongType: aBufferOop signed: signedBoolean	<primitive: 'primitiveNSInvocationGetLongLongType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 17:14'!primitiveNSInvocationGetLongType: aBufferOop signed: signedBoolean	<primitive: 'primitiveNSInvocationGetLongType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:57'!primitiveNSInvocationGetObjectType: aBufferOop	<primitive: 'primitiveNSInvocationGetObjectType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 4/24/2009 16:26'!primitiveNSInvocationGetReturnValue: returnValueAddress on: aNSinvokeOops	<primitive: 'primitiveNSInvocationGetReturnValue' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 16:58'!primitiveNSInvocationGetSelectorType: aBufferOop	<primitive: 'primitiveNSInvocationGetSelectorType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/25/2008 17:14'!primitiveNSInvocationGetShortType: aBufferOop signed: signedBoolean	<primitive: 'primitiveNSInvocationGetShortType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 10/24/2008 14:19'!primitiveNSInvocationGetStructureType: bufferAddressOop length: length	<primitive: 'primitiveNSInvocationGetStructureType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 02:22'!primitiveNSInvocationMalloc: storageObject	<primitive: 'primitiveNSInvocationMalloc' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 00:59'!primitiveNSInvocationSetCType: aMethodSignatureOop signed: signedBoolean index: index value: aValue	<primitive: 'primitiveNSInvocationSetCType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:00'!primitiveNSInvocationSetDoubleType: aMethodSignatureOop  index: index value: aValue	<primitive: 'primitiveNSInvocationSetDoubleType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:00'!primitiveNSInvocationSetFloatType: aMethodSignatureOop  index: index value: aValue	<primitive: 'primitiveNSInvocationSetFloatType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:00'!primitiveNSInvocationSetIntType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	<primitive: 'primitiveNSInvocationSetIntType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:01'!primitiveNSInvocationSetLongLongType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	<primitive: 'primitiveNSInvocationSetLongLongType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:01'!primitiveNSInvocationSetLongType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	<primitive: 'primitiveNSInvocationSetLongType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:01'!primitiveNSInvocationSetPointerType: aMethodSignatureOop  index: index value: pointerValue	<primitive: 'primitiveNSInvocationSetPointerType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 4/24/2009 10:26'!primitiveNSInvocationSetSelector: aSel  target: object1Oops on: aNSinvokeOops	<primitive: 'primitiveNSInvocationSetSelector' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:02'!primitiveNSInvocationSetShortType: aMethodSignatureOop signed: signedBoolean index: index value: intValue	<primitive: 'primitiveNSInvocationSetShortType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/24/2008 01:02'!primitiveNSInvocationSetStringType: aMethodSignatureOop  index: index value: aValue	<primitive: 'primitiveNSInvocationSetStringType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 10/24/2008 14:44'!primitiveNSInvocationSetStructureType: aMethodSignatureOop  index: index value: aValue	<primitive: 'primitiveNSInvocationSetStructureType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 10/25/2008 07:32'!primitiveNSInvocationSetVoidPointerType: aMethodSignatureOop  index: index value: pointerValue	<primitive: 'primitiveNSInvocationSetVoidPointerType' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 4/24/2009 10:10'!primitiveNSInvocationWithMethodSignature: aMethodSignatureOops	<primitive: 'primitiveNSInvocationWithMethodSignature' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'John M McIntosh 2/2/2009 12:59'!primitiveNSLog: oop1	<primitive: 'primitiveNSLog' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/22/2008 14:43'!primitivePerformSelector: aSelectorOop on: aClassorInstanceOop	<primitive: 'primitivePerformSelector' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/23/2008 18:03'!primitivePerformSelector: aSelectorOop on: aClassorInstanceOop with: argument1	<primitive: 'primitivePerformSelectorWith' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 9/30/2008 06:09'!primitivePerformSelector: aSelectorOop on: aClassorInstanceOop with: argument1 with: argument2	<primitive: 'primitivePerformSelectorWithWith' module: 'ObjectiveCPlugin'>	self primitiveFailed! !!ObjectiveCBridge class methodsFor: 'system primitives' stamp: 'JMM 11/5/2008 10:38'!primitivePerformSelectorOnMainThreadWithWaitTilDone: aSelectorOop on: aClassorInstanceOop with: argument1 returnValue:  aReturnValue waitTilDone: doneFlag	<primitive: 'primitivePerformSelectorOnMainThreadWithWaitTilDone' module: 'ObjectiveCPlugin'>	self primitiveFailed! !Object subclass: #ObjectiveCNSNull	instanceVariableNames: ''	classVariableNames: 'Singleton'	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCNSNull commentStamp: '<historical>' prior: 0!*  Created by John M McIntosh on 9/17/08. Some of this code was funded via a grant from the European Smalltalk User Group (ESUG) Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectiveCNSNull class	instanceVariableNames: ''!!ObjectiveCNSNull class methodsFor: 'initialize-release' stamp: 'John M McIntosh 4/24/2009 09:40'!createSingleton	| classOop message |	classOop := ObjectiveCBridge classObjectForName: #NSNull.	message := Message selector: #null arguments: Array new.		Singleton := ObjectiveCBridge forward: message to: classOop.	^Singleton! !!ObjectiveCNSNull class methodsFor: 'initialize-release' stamp: 'JMM 9/25/2008 13:32'!singleton	(Singleton == nil or: [Singleton externalAddressPrivate = 0])		 ifTrue: [self createSingleton].	^Singleton! !!ObjectiveCNSNull class methodsFor: 'accessing' stamp: 'JMM 9/25/2008 13:35'!null	"ObjectiveCNSNull null"	^self singleton! !ProtoObject subclass: #ObjectiveCObject	instanceVariableNames: 'externalAddress'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCObject commentStamp: '<historical>' prior: 0!*  Created by John M McIntosh on 9/17/08. Some of this code was funded via a grant from the European Smalltalk User Group (ESUG) Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!!ObjectiveCObject methodsFor: 'comparing' stamp: 'JMM 10/3/2008 09:25'!= other	self smalltalkClass == other smalltalkClass ifFalse: [^ false].	self externalAddressPrivate = other externalAddressPrivate ifTrue: [^ true].	^ObjectiveCBridge isEqual: self to: other! !!ObjectiveCObject methodsFor: 'comparing' stamp: 'JMM 10/17/2008 12:30'!hash	self ifNil: [^ObjectiveCNSNull singleton objectiveCHash].	^self objectiveCHash! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/23/2008 13:43'!asExplorerString	^ self printString! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'John M McIntosh 1/23/2009 15:32'!basicSize	"Primitive. Answer the number of indexable variables in the receiver. 	This value is the same as the largest legal subscript. Essential. Do not 	override in any subclass. See Object documentation whatIsAPrimitive."	<primitive: 62>	"The number of indexable fields of fixed-length objects is 0"	^0	! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 23:42'!defaultLabelForInspector	"Answer the default label to be used for an Inspector window on the receiver."	^ self class name! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:38'!error: aString 	"Throw a generic Error exception."	^Error new signal: aString! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/29/2008 01:10'!halt	"This is the typical message to use for inserting breakpoints during 	debugging. It behaves like halt:, but does not call on halt: in order to 	avoid putting this message on the stack. Halt is especially useful when 	the breakpoint message is an arbitrary one."	Halt signal! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 23:41'!inspect	"Create and schedule an Inspector in which the user can examine the receiver's variables."	^self inspectorClass openOn: self withEvalPane: true! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:39'!inspectorClass	"Answer the class of the inspector to be used on the receiver.  Called by inspect; 	use basicInspect to get a normal (less useful) type of inspector."	^ Inspector! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:46'!instVarAt: index 	"Primitive. Answer a fixed variable in an object. The numbering of the 	variables corresponds to the named instance variables. Fail if the index 	is not an Integer or is not the index of a fixed variable. Essential. See 	Object documentation whatIsAPrimitive."	<primitive: 73>	"Access beyond fixed variables."	^self basicAt: index - self class instSize		! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'John M McIntosh 1/23/2009 15:32'!isCompiledMethod	^ false! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:37'!isKindOf: aClass 	"Answer whether the class, aClass, is a superclass or class of the receiver."	self smalltalkClass == aClass		ifTrue: [^true]		ifFalse: [^self smalltalkClass inheritsFrom: aClass]! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'John M McIntosh 1/23/2009 15:28'!isLiteral	"Answer whether the receiver has a literal text form recognized by the 	compiler."	^false! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 23:07'!isMorph	^false! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/23/2008 13:46'!isNumber	^false! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'John M McIntosh 2/4/2009 20:59'!isSelfEvaluating	^ self isLiteral! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/23/2008 13:46'!isString	^false! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:38'!primitiveFailed	"Announce that a primitive has failed and there is no appropriate 	Smalltalk code to run."	self error: 'a primitive has failed'! !!ObjectiveCObject methodsFor: 'smalltalk methods' stamp: 'JMM 9/22/2008 22:37'!smalltalkClass	"Primitive. Answer the object which is the receiver's class. Essential. See 	Object documentation whatIsAPrimitive."	<primitive: 111>	self primitiveFailed! !!ObjectiveCObject methodsFor: 'converting' stamp: 'John M McIntosh 2/2/2009 15:45'!asNSInvocation	^ObjectiveCNSInvocation newWithExternalAddress: self externalAddress.! !!ObjectiveCObject methodsFor: 'converting' stamp: 'John M McIntosh 2/3/2009 12:54'!asNSMethodSignature	^ObjectiveCNSMethodSignature newWithExternalAddress: self externalAddress.! !!ObjectiveCObject methodsFor: 'converting' stamp: 'JMM 9/23/2008 13:39'!asString	^ObjectiveCBridge asString: self! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/29/2008 01:12'!descriptionAsString	^ObjectiveCBridge descriptionAsStringFor: self! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/25/2008 13:19'!externalAddress	"Answer the value of externalAddress"	externalAddress = 0 ifTrue: [self error: 'bad Objective C memory address'].	^ externalAddress! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/22/2008 13:18'!externalAddress: anObject	"Set the value of externalAddress"	externalAddress _ anObject! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/25/2008 13:18'!externalAddressPrivate	"Answer the value of externalAddress"	^ externalAddress! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/23/2008 14:53'!objectiveCClass	^ObjectiveCBridge classObjectForOop: self! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/25/2008 00:18'!objectiveCHash	^ObjectiveCBridge hashForOop: self! !!ObjectiveCObject methodsFor: 'accessing' stamp: 'JMM 9/23/2008 23:23'!objectiveCSuperClass	^ObjectiveCBridge superClassObjectForOop: self! !!ObjectiveCObject methodsFor: 'forwarding' stamp: 'JMM 9/25/2008 00:23'!doesNotUnderstand:aMessage	^ObjectiveCBridge forward: aMessage to: self.! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/22/2008 13:31'!ifNil: nilBlock	^self isNil ifTrue: [nilBlock value]! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/22/2008 13:33'!ifNil: nilBlock ifNotNil: ifNotNilBlock	^self isNil ifTrue: [nilBlock value] 		ifFalse: [ifNotNilBlock value]! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/22/2008 13:33'!ifNotNil: ifNotNilBlock	^self isNil ifFalse: [ifNotNilBlock value]! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/22/2008 13:33'!ifNotNil: ifNotNilBlock ifNil: nilBlock 	^self isNil ifTrue: [nilBlock value] 		ifFalse: [ifNotNilBlock value]! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/28/2008 15:41'!isNil	^self externalAddressPrivate = 0 or: [self externalAddressPrivate = ObjectiveCNSNull singleton externalAddressPrivate]! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/28/2008 15:58'!isNilPrivate	^self externalAddressPrivate = 0! !!ObjectiveCObject methodsFor: 'testing' stamp: 'JMM 9/23/2008 16:54'!isObjectiveCObject	^true! !!ObjectiveCObject methodsFor: 'printing' stamp: 'JMM 9/22/2008 22:45'!longPrintOn: aStream limitedTo: sizeLimit indent: indent	"Append to the argument, aStream, the names and values of all of the receiver's instance variables.  Limit is the length limit for each inst var."	self smalltalkClass allInstVarNames doWithIndex:		[:title :index |		indent timesRepeat: [aStream tab].		aStream nextPutAll: title;		 nextPut: $:;		 space;		 tab;		 nextPutAll: 			((self instVarAt: index) printStringLimitedTo: (sizeLimit -3 -title size max: 1));		 cr]! !!ObjectiveCObject methodsFor: 'printing' stamp: 'JMM 9/22/2008 22:45'!longPrintStringLimitedTo: aLimitValue	"Answer a String whose characters are a description of the receiver."		| str |	str _ String streamContents: [:aStream | self longPrintOn: aStream limitedTo: aLimitValue indent: 0].	"Objects without inst vars should return something"	^ str isEmpty ifTrue: [self printString, String cr] ifFalse: [str]! !!ObjectiveCObject methodsFor: 'printing' stamp: 'JMM 9/25/2008 13:21'!printOn: aStream	| title |	title _ self smalltalkClass name.	aStream		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);		nextPutAll: title.	aStream nextPut: $(;		nextPutAll: self externalAddressPrivate printStringHex;		space;		"nextPutAll: self descriptionAsString;"		nextPut: $)! !!ObjectiveCObject methodsFor: 'printing' stamp: 'JMM 9/22/2008 22:00'!printString	"Answer a String whose characters are a description of the receiver. 	If you want to print without a character limit, use fullPrintString."	^ self printStringLimitedTo: 50000! !!ObjectiveCObject methodsFor: 'printing' stamp: 'JMM 9/22/2008 22:00'!printStringLimitedTo: limit	"Answer a String whose characters are a description of the receiver.	If you want to print without a character limit, use fullPrintString."	| limitedString |	limitedString _ String streamContents: [:s | self printOn: s] limitedTo: limit.	limitedString size < limit ifTrue: [^ limitedString].	^ limitedString , '...etc...'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectiveCObject class	instanceVariableNames: ''!!ObjectiveCObject class methodsFor: 'instance creation' stamp: 'JMM 9/22/2008 17:31'!findClassName: aName	^ObjectiveCBridge classObjectForName: aName! !!ObjectiveCObject class methodsFor: 'instance creation' stamp: 'JMM 9/29/2008 22:56'!newWithExternalAddress: anAddress	| obj |	obj := self new.	obj externalAddress: anAddress.	false ifTrue: [Transcript show: anAddress;space;show: obj descriptionAsString;cr;flush].	^obj! !ObjectiveCObject subclass: #ObjectiveCNSInvocation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCNSInvocation methodsFor: 'message signature' stamp: 'John M McIntosh 2/4/2009 21:47'!getArgument: buffer atIndex: aNumber	ObjectiveCBridge nsInvocationGetArgument: self externalAddress buffer: buffer atIndex: aNumber! !!ObjectiveCNSInvocation methodsFor: 'message signature' stamp: 'John M McIntosh 2/3/2009 12:54'!methodSignature	^super methodSignature asNSMethodSignature.! !!ObjectiveCNSInvocation methodsFor: 'message signature' stamp: 'John M McIntosh 2/3/2009 16:08'!selectorAsString	^self selector descriptionAsString! !ObjectiveCObject subclass: #ObjectiveCNSMethodSignature	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCNSMethodSignature commentStamp: '<historical>' prior: 0!*  Created by John M McIntosh on 9/17/08. Some of this code was funded via a grant from the European Smalltalk User Group (ESUG) Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!!ObjectiveCNSMethodSignature methodsFor: 'accessing' stamp: 'John M McIntosh 2/4/2009 21:25'!getMethodArgumentTypeAtIndex: i	^ObjectiveCBridge methodArgumentTypeFor: self atIndex: i! !!ObjectiveCNSMethodSignature methodsFor: 'accessing' stamp: 'JMM 9/23/2008 13:36'!methodNumberOfArguments	^ObjectiveCBridge methodNumberOfArguments: self.! !!ObjectiveCNSMethodSignature methodsFor: 'accessing' stamp: 'JMM 9/29/2008 02:41'!methodReturnLength	^ObjectiveCBridge  methodReturnLength:  self ! !!ObjectiveCNSMethodSignature methodsFor: 'accessing' stamp: 'JMM 9/23/2008 13:35'!methodReturnType	^ObjectiveCBridge  methodReturnType: self ! !Object subclass: #ObjectiveCSEL	instanceVariableNames: 'externalAddress'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCSEL commentStamp: '<historical>' prior: 0!*  Created by John M McIntosh on 9/28/08. Some of this code was funded via a grant from the European Smalltalk User Group (ESUG) Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!!ObjectiveCSEL methodsFor: 'comparing' stamp: 'JMM 9/29/2008 22:57'!= other	self class == other class ifFalse: [^ false].	^self externalAddressPrivate = other externalAddressPrivate! !!ObjectiveCSEL methodsFor: 'comparing' stamp: 'JMM 9/29/2008 22:35'!hash	^self externalAddressPrivate hash! !!ObjectiveCSEL methodsFor: 'accessing' stamp: 'John M McIntosh 2/3/2009 14:12'!descriptionAsString	^self primitiveSELGetName: self externalAddress.! !!ObjectiveCSEL methodsFor: 'accessing' stamp: 'JMM 9/29/2008 22:35'!externalAddress	"Answer the value of externalAddress"	externalAddress = 0 ifTrue: [self error: 'bad SEL memory address'].	^ externalAddress! !!ObjectiveCSEL methodsFor: 'accessing' stamp: 'JMM 9/29/2008 22:35'!externalAddress: anObject	"Set the value of externalAddress"	externalAddress _ anObject! !!ObjectiveCSEL methodsFor: 'accessing' stamp: 'JMM 9/29/2008 22:35'!externalAddressPrivate	"Answer the value of externalAddress"	^ externalAddress! !!ObjectiveCSEL methodsFor: 'testing' stamp: 'JMM 9/29/2008 22:52'!isObjectiveCObject	^true! !!ObjectiveCSEL methodsFor: 'system primitives' stamp: 'John M McIntosh 2/3/2009 14:11'!primitiveSELGetName: aSEL	<primitive: 'primitiveSELGetName' module: 'ObjectiveCPlugin'>	self primitiveFailed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectiveCSEL class	instanceVariableNames: ''!!ObjectiveCSEL class methodsFor: 'instance creation' stamp: 'JMM 9/29/2008 23:05'!newWithExternalAddress: anAddress	| obj |	obj := self new.	obj externalAddress: anAddress.	false ifTrue: [Transcript show: anAddress;space;show: obj descriptionAsString;cr;flush].	^obj! !Object subclass: #ObjectiveCSqueakProxy	instanceVariableNames: 'callbackSem callbackSemNumber squeakProxy'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjectiveC-Base'!!ObjectiveCSqueakProxy commentStamp: 'John M McIntosh 2/2/2009 16:06' prior: 0!*  Created by John M McIntosh on 2/03/09 Copyright (c) 2008 Corporate Smalltalk Consulting Ltd. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.The end-user documentation included with the redistribution, if any, must include the following acknowledgment: "This product includes software developed by Corporate Smalltalk Consulting Ltd (http://www.smalltalkconsulting.com) and its contributors", in the same place and form as other third-party acknowledgments. Alternately, this acknowledgment may appear in the software itself, in the same form and location as other such third-party acknowledgments.!!ObjectiveCSqueakProxy methodsFor: 'signatures' stamp: 'John M McIntosh 3/6/2009 09:28'!addSigViaString: aString aSignature: aSignatureString	| stringMethod stringSignatureString |		stringMethod := aString asNSStringUTF8.	stringSignatureString := aSignatureString asNSStringUTF8.	squeakProxy sigs setObject: stringSignatureString forKey: stringMethod.	stringSignatureString release.	stringMethod release.! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!callbackSem	"Answer the value of callbackSem"	^ callbackSem! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!callbackSem: anObject	"Set the value of callbackSem"	callbackSem := anObject! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!callbackSemNumber	"Answer the value of callbackSemNumber"	^ callbackSemNumber! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!callbackSemNumber: anObject	"Set the value of callbackSemNumber"	callbackSemNumber := anObject! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 16:03'!invocation	^squeakProxy invocation asNSInvocation! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!squeakProxy	"Answer the value of squeakProxy"	^ squeakProxy! !!ObjectiveCSqueakProxy methodsFor: 'accessing' stamp: 'John M McIntosh 2/2/2009 15:53'!squeakProxy: anObject	"Set the value of squeakProxy"	squeakProxy := anObject! !!ObjectiveCSqueakProxy methodsFor: 'processing' stamp: 'John M McIntosh 2/6/2009 12:01'!dispatch	| msgContextInvocation msgSignature arguments selectorNameString argumentType argumentLength storageArea object argCollection |		msgContextInvocation := self invocation.	msgSignature := msgContextInvocation methodSignature.	arguments := msgSignature methodNumberOfArguments.	selectorNameString :=  msgContextInvocation selectorAsString. 	argCollection := OrderedCollection new.	argumentLength := msgSignature frameLength.	storageArea := ObjectiveCBridge nsInvocationMalloc: argumentLength.																		1 to: arguments do: [:indexValue |  			argumentType := msgSignature getMethodArgumentTypeAtIndex: indexValue.		msgContextInvocation getArgument: storageArea  atIndex: indexValue.		object := ObjectiveCBridge nsInvokeHandleReturnType: argumentType  locatedAt: storageArea  length: argumentLength.		argCollection add: object.	].	ObjectiveCBridge nsInvocationFree: storageArea.	^self perform: selectorNameString asSymbol withArguments: argCollection asArray.	! !!ObjectiveCSqueakProxy methodsFor: 'processing' stamp: 'John M McIntosh 2/8/2009 15:39'!postLockProcessing! !!ObjectiveCSqueakProxy methodsFor: 'processing' stamp: 'John M McIntosh 3/29/2009 02:51'!runUntilTerminateConditionBlock: aBlock	| returnItem |		[self wait.		ObjectiveCBridge wrapWithAutoReleasePool: [			self lockWhenCondition: 1.			returnItem := self dispatch.			returnItem ~~ self ifTrue: [self squeakProxy setReturnValue: returnItem].			self unlockWithCondition: 2.			ObjectiveCBridge callbackLeave: self squeakProxy callbackid.			[self postLockProcessing] ifError: [Smalltalk logError:'Fatal error: callbackLeave' inContext: thisContext to: 'SqueakDebug.log'.]].		(aBlock value: self) ifTrue: [^self]] repeat! !!ObjectiveCSqueakProxy methodsFor: 'processing' stamp: 'John M McIntosh 3/5/2009 19:38'!setIsCarbonVM	self squeakProxy setIsCarbonVM! !!ObjectiveCSqueakProxy methodsFor: 'initialize-release' stamp: 'John M McIntosh 4/24/2009 09:40'!initializeWithProtocol: aProtocolString target: aTarget	| aSqueakProxyClass protocolNSString |		aSqueakProxyClass := ObjectiveCBridge classObjectForName: #SqueakProxy.	protocolNSString := self setupStringAndSemaphore: aProtocolString.	squeakProxy := aSqueakProxyClass alloc 		initWithSemaphore: callbackSemNumber 		protocolNSString: protocolNSString target: aTarget.	[squeakProxy isDataTypeAware] ifError: [self  halt].	protocolNSString == 0 ifFalse: [protocolNSString release].	! !!ObjectiveCSqueakProxy methodsFor: 'initialize-release' stamp: 'John M McIntosh 2/14/2009 12:32'!release	super release.	self squeakProxy release.	Smalltalk unregisterExternalObject: self callbackSem.! !!ObjectiveCSqueakProxy methodsFor: 'initialize-release' stamp: 'John M McIntosh 2/14/2009 18:00'!setupStringAndSemaphore: aProtocolString	callbackSem := Semaphore new.	callbackSemNumber := Smalltalk registerExternalObject: callbackSem.	aProtocolString ifNil: [^0].	^aProtocolString asNSStringUTF8.! !!ObjectiveCSqueakProxy methodsFor: 'semaphore' stamp: 'John M McIntosh 9/4/2009 10:47'!lockWhenCondition: aNumber	squeakProxy lockForSqueak lockWhenCondition: aNumber! !!ObjectiveCSqueakProxy methodsFor: 'semaphore' stamp: 'John M McIntosh 9/4/2009 10:47'!unlockWithCondition: aNumber	squeakProxy lockForSqueak unlockWithCondition: aNumber! !!ObjectiveCSqueakProxy methodsFor: 'semaphore' stamp: 'John M McIntosh 2/2/2009 15:58'!wait	self callbackSem wait.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectiveCSqueakProxy class	instanceVariableNames: ''!!ObjectiveCSqueakProxy class methodsFor: 'instance creation' stamp: 'John M McIntosh 2/14/2009 17:58'!forProtocolString: aProtocolString	^self new initializeWithProtocol: aProtocolString target: 0! !!ObjectiveCSqueakProxy class methodsFor: 'instance creation' stamp: 'John M McIntosh 2/14/2009 12:38'!forProtocolString: aProtocolString target: aTarget	^self new initializeWithProtocol: aProtocolString target: aTarget! !ObjectiveCBridge initialize!