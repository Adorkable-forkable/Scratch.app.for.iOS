'From Pharo0.1 of 16 May 2008 [Latest update: #10204] on 28 January 2010 at 10:09:43 pm'!!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 1/28/2000 17:45'!asExternalPointer	"Convert the receiver assuming that it describes a pointer to an object."	^(ExternalAddress new)		basicAt: 1 put: (self byteAt: 1);		basicAt: 2 put: (self byteAt: 2);		basicAt: 3 put: (self byteAt: 3);		basicAt: 4 put: (self byteAt: 4);	yourself! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:15'!booleanAt: byteOffset	"bool is only valid with function declarations"	^self shouldNotImplement! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:15'!booleanAt: byteOffset put: value	"bool is only valid with function declarations"	^self shouldNotImplement! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:44'!doubleAt: byteOffset	<primitive:'primitiveFFIDoubleAt' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:13'!doubleAt: byteOffset put: value	<primitive:'primitiveFFIDoubleAtPut' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:13'!floatAt: byteOffset	<primitive:'primitiveFFIFloatAt' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:13'!floatAt: byteOffset put: value	<primitive:'primitiveFFIFloatAtPut' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:56'!integerAt: byteOffset put: value size: nBytes signed: aBoolean	"Primitive. Store the given value as integer of nBytes size	in the receiver. Fail if the value is out of range.	Note: This primitive will access memory in the outer space if	invoked from ExternalAddress."	<primitive: 'primitiveFFIIntegerAtPut' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:55'!integerAt: byteOffset size: nBytes signed: aBoolean	"Primitive. Return an integer of nBytes size from the receiver.	Note: This primitive will access memory in the outer space if	invoked from ExternalAddress."	<primitive: 'primitiveFFIIntegerAt' module:'SqueakFFIPrims'>	^self primitiveFailed! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:09'!isExternalAddress	"Return true if the receiver describes an object in the outside world"	^false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:15'!pointerAt: byteOffset	"Return a pointer object stored at the given byte address"	| addr |	addr := ExternalAddress new.	1 to: 4 do:[:i|		addr basicAt: i put: (self unsignedByteAt: byteOffset+i-1)].	^addr! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'hg 2/28/2000 15:34'!pointerAt: byteOffset put: value	"Store a pointer object at the given byte address"	value isExternalAddress ifFalse:[^self error:'Only external addresses can be stored'].	1 to: 4 do:[:i|		self unsignedByteAt: byteOffset+i-1 put: (value basicAt: i)].	^value! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:39'!signedByteAt: byteOffset	"Return a 8bit signed integer starting at the given byte offset"	^self integerAt: byteOffset size: 1 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:39'!signedByteAt: byteOffset put: value	"Store a 8bit signed integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 1 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:53'!signedCharAt: byteOffset	^(self unsignedByteAt: byteOffset) asCharacter! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:54'!signedCharAt: byteOffset put: aCharacter	^self unsignedByteAt: byteOffset put: aCharacter asciiValue! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 15:54'!signedLongAt: byteOffset	"Return a 32bit signed integer starting at the given byte offset"	^self integerAt: byteOffset size: 4 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 15:54'!signedLongAt: byteOffset put: value	"Store a 32bit signed integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 4 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:16'!signedLongLongAt: byteOffset	"This is not yet supported"	^self notYetImplemented! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:17'!signedLongLongAt: byteOffset put: value	"This is not yet supported"	^self notYetImplemented! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 15:54'!signedShortAt: byteOffset	"Return a 16bit signed integer starting at the given byte offset"	^self integerAt: byteOffset size: 2 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 15:54'!signedShortAt: byteOffset put: value	"Store a 16bit signed integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 2 signed: true! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'hg 2/28/2000 13:56'!structAt: byteOffset length: length	"Return a structure of the given length starting at the indicated byte offset."	| value |	value := ByteArray new: length.	1 to: length do:[:i|		value unsignedByteAt: i put: (self unsignedByteAt: byteOffset+i-1)].	^value! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 21:11'!structAt: byteOffset put: value length: length	"Store a structure of the given length starting at the indicated byte offset."	1 to: length do:[:i|		self unsignedByteAt: byteOffset+i-1 put: (value unsignedByteAt: i)].	^value! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:40'!unsignedByteAt: byteOffset	"Return a 8bit unsigned integer starting at the given byte offset"	^self integerAt: byteOffset size: 1 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:40'!unsignedByteAt: byteOffset put: value	"Store a 8bit unsigned integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 1 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:53'!unsignedCharAt: byteOffset	^(self unsignedByteAt: byteOffset) asCharacter! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/28/1999 23:54'!unsignedCharAt: byteOffset put: aCharacter	^self unsignedByteAt: byteOffset put: aCharacter asciiValue! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:23'!unsignedLongAt: byteOffset	"Return a 32bit unsigned integer starting at the given byte offset"	^self integerAt: byteOffset size: 4 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 01:23'!unsignedLongAt: byteOffset put: value	"Store a 32bit signed integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 4 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:17'!unsignedLongLongAt: byteOffset	"This is not yet supported"	^self notYetImplemented! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:17'!unsignedLongLongAt: byteOffset put: value	"This is not yet supported"	^self notYetImplemented! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 00:55'!unsignedShortAt: byteOffset	"Return a 16bit unsigned integer starting at the given byte offset"	^self integerAt: byteOffset size: 2 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/21/1999 00:56'!unsignedShortAt: byteOffset put: value	"Store a 16bit unsigned integer starting at the given byte offset"	^self integerAt: byteOffset put: value size: 2 signed: false! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:16'!voidAt: byteOffset	"no accessors for void"	^self shouldNotImplement! !!ByteArray methodsFor: '*FFI-Kernel' stamp: 'ar 11/29/1999 00:16'!voidAt: byteOffset put: value	"no accessors for void"	^self shouldNotImplement! !