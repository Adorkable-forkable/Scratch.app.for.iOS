'From Pharo1.1a of ''19 October 2009'' [Latest update: #11043] on 28 January 2010 at 9:35:22 pm'!nil subclass: #ProtoObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'.ProtoObject superclass: nil!!ProtoObject commentStamp: '<historical>' prior: 0!ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added.!!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:20'!tryNamedPrimitive	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:20'!tryNamedPrimitive: arg1	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:20'!tryNamedPrimitive: arg1 with: arg2	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:20'!tryNamedPrimitive: arg1 with: arg2 with: arg3	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:20'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:21'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:21'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:21'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:21'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'ajh 1/31/2003 22:21'!tryPrimitive: primIndex withArgs: argumentArray	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive: 118>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'comparing' stamp: 'G.C 10/23/2008 10:13'!== anObject 	"Primitive. Answer whether the receiver and the argument are the same 	object (have the same object pointer). Do not redefine the message == in 	any other class!! Essential. No Lookup. Do not override in any subclass. 	See Object documentation whatIsAPrimitive."	<primitive: 110>	self primitiveFailed! !!ProtoObject methodsFor: 'comparing' stamp: 'md 11/24/1999 19:27'!identityHash	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.	Primitive. Fails if the receiver is a SmallInteger. Essential.	See Object documentation whatIsAPrimitive.	Do not override."	<primitive: 75>	self primitiveFailed! !!ProtoObject methodsFor: 'comparing' stamp: 'md 11/24/1999 19:27'!~~ anObject	"Answer whether the receiver and the argument are not the same object 	(do not have the same object pointer)."	self == anObject		ifTrue: [^ false]		ifFalse: [^ true]! !!ProtoObject methodsFor: 'debugging' stamp: 'sw 10/26/2000 14:29'!doOnlyOnce: aBlock	"If the 'one-shot' mechanism is armed, evaluate aBlock once and disarm the one-shot mechanism.  To rearm the mechanism, evaluate  'self rearmOneShot' manually."	(Smalltalk at: #OneShotArmed ifAbsent: [true])		ifTrue:			[Smalltalk at: #OneShotArmed put: false.			aBlock value]! !!ProtoObject methodsFor: 'debugging' stamp: 'marcus.denker 8/25/2008 09:12'!flag: aSymbol	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !!ProtoObject methodsFor: 'debugging' stamp: 'sw 10/26/2000 14:27'!rearmOneShot	"Call this manually to arm the one-shot mechanism; use the mechanism in code by calling		self doOnlyOnce: <a block>"	Smalltalk at: #OneShotArmed put: true	"self rearmOneShot"! !!ProtoObject methodsFor: 'debugging' stamp: 'eem 4/8/2009 19:10'!withArgs: argArray executeMethod: compiledMethod	"Execute compiledMethod against the receiver and args in argArray"	<primitive: 188>	self primitiveFailed! !!ProtoObject methodsFor: 'initialize-release' stamp: 'md 11/18/2003 10:33'!initialize	"Subclasses should redefine this method to perform initializations on instance creation"! !!ProtoObject methodsFor: 'method execution' stamp: 'marcus.denker 10/3/2008 16:46'!executeMethod: compiledMethod	"Execute compiledMethod against the receiver with no args"	<primitive: 189>	^ self withArgs: #() executeMethod: compiledMethod! !!ProtoObject methodsFor: 'method execution' stamp: 'marcus.denker 10/3/2008 16:46'!with: arg1 executeMethod: compiledMethod	"Execute compiledMethod against the receiver and arg1"	<primitive: 189>	^ self withArgs: {arg1} executeMethod: compiledMethod! !!ProtoObject methodsFor: 'method execution' stamp: 'marcus.denker 10/3/2008 16:46'!with: arg1 with: arg2 executeMethod: compiledMethod	"Execute compiledMethod against the receiver and arg1 & arg2"	<primitive: 189>	^ self withArgs: {arg1. arg2} executeMethod: compiledMethod! !!ProtoObject methodsFor: 'method execution' stamp: 'marcus.denker 10/3/2008 16:46'!with: arg1 with: arg2 with: arg3 executeMethod: compiledMethod	"Execute compiledMethod against the receiver and arg1, arg2, & arg3"	<primitive: 189>	^ self withArgs: {arg1. arg2. arg3} executeMethod: compiledMethod! !!ProtoObject methodsFor: 'method execution' stamp: 'marcus.denker 10/3/2008 16:46'!with: arg1 with: arg2 with: arg3 with: arg4 executeMethod: compiledMethod	"Execute compiledMethod against the receiver and arg1, arg2, arg3, & arg4"	<primitive: 189>	^ self withArgs: {arg1. arg2. arg3. arg4} executeMethod: compiledMethod! !!ProtoObject methodsFor: 'objects from disk' stamp: 'md 11/24/1999 20:03'!rehash	"Do nothing.  Here so sending this to a Set does not have to do a time consuming respondsTo:"! !!ProtoObject methodsFor: 'system primitives' stamp: 'md 11/24/1999 19:30'!become: otherObject 	"Primitive. Swap the object pointers of the receiver and the argument.	All variables in the entire system that used to point to the 	receiver now point to the argument, and vice-versa.	Fails if either object is a SmallInteger"	(Array with: self)		elementsExchangeIdentityWith:			(Array with: otherObject)! !!ProtoObject methodsFor: 'system primitives' stamp: 'ajh 1/13/2002 17:02'!cannotInterpret: aMessage 	 "Handle the fact that there was an attempt to send the given message to the receiver but a null methodDictionary was encountered while looking up the message selector.  Hopefully this is the result of encountering a stub for a swapped out class which induces this exception on purpose.""If this is the result of encountering a swap-out stub, then simulating the lookup in Smalltalk should suffice to install the class properly, and the message may be resent."	(self class lookupSelector: aMessage selector) == nil ifFalse:		["Simulated lookup succeeded -- resend the message."		^ aMessage sentTo: self].	"Could not recover by simulated lookup -- it's an error"	Error signal: 'MethodDictionary fault'.	"Try again in case an error handler fixed things"	^ aMessage sentTo: self! !!ProtoObject methodsFor: 'system primitives' stamp: 'ajh 10/9/2001 17:20'!doesNotUnderstand: aMessage	^ MessageNotUnderstood new 		message: aMessage;		receiver: self;		signal! !!ProtoObject methodsFor: 'system primitives' stamp: 'md 11/24/1999 19:58'!nextInstance	"Primitive. Answer the next instance after the receiver in the 	enumeration of all instances of this class. Fails if all instances have been 	enumerated. Essential. See Object documentation whatIsAPrimitive."	<primitive: 78>	^nil! !!ProtoObject methodsFor: 'system primitives' stamp: 'md 11/24/1999 19:58'!nextObject	"Primitive. Answer the next object after the receiver in the 	enumeration of all objects. Return 0 when all objects have been 	enumerated."	<primitive: 139>	self primitiveFailed.! !!ProtoObject methodsFor: 'testing' stamp: 'md 11/24/1999 19:23'!ifNil: nilBlock	"Return self, or evaluate the block if I'm == nil (q.v.)"	^ self! !!ProtoObject methodsFor: 'testing' stamp: 'vb 4/15/2007 10:54'!ifNil: nilBlock ifNotNil: ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock valueWithPossibleArgs: {self}! !!ProtoObject methodsFor: 'testing' stamp: 'eem 5/23/2008 11:02'!ifNotNil: ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock valueWithPossibleArgs: {self}! !!ProtoObject methodsFor: 'testing' stamp: 'vb 4/15/2007 10:55'!ifNotNil: ifNotNilBlock ifNil: nilBlock 	"If I got here, I am not nil, so evaluate the block ifNotNilBlock"	^ ifNotNilBlock valueWithPossibleArgs: {self}! !!ProtoObject methodsFor: 'testing' stamp: 'md 11/24/1999 19:57'!isInMemory	"All normal objects are."	^ true! !!ProtoObject methodsFor: 'testing' stamp: 'md 11/24/1999 19:26'!isNil	"Coerces nil to true and everything else to false."	^false! !!ProtoObject methodsFor: 'testing' stamp: 'md 11/24/1999 19:58'!pointsTo: anObject	"This method returns true if self contains a pointer to anObject,		and returns false otherwise"	<primitive: 132>	1 to: self class instSize do:		[:i | (self instVarAt: i) == anObject ifTrue: [^ true]].	1 to: self basicSize do:		[:i | (self basicAt: i) == anObject ifTrue: [^ true]].	^ false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProtoObject class	instanceVariableNames: ''!!ProtoObject class methodsFor: 'as yet unclassified' stamp: 'sw 5/5/2000 09:31'!initializedInstance	^ nil! !